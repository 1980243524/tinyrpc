// Copyright 2022 <mzh.scnu@qq.com>. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

type tinyrpc struct{}

func main() {
	g := tinyrpc{}
	protogen.Options{}.Run(g.Generate)
}

func (md *tinyrpc) Generate(plugin *protogen.Plugin) error {
	for _, f := range plugin.Files {
		if len(f.Services) == 0 {
			continue
		}
		fname := f.GeneratedFilenamePrefix + ".svr.go"
		t := plugin.NewGeneratedFile(fname, f.GoImportPath)
		t.P("// Code generated by protoc-gen-tinyrpc.\n")
		pkg := fmt.Sprintf("package %s", f.GoPackageName)
		t.P(pkg)
		t.P()
		for _, s := range f.Services {
			if strings.TrimSpace(string(s.Comments.Leading)) != "" {
				t.P(s.Comments.Leading)
			}
			if strings.TrimSpace(string(s.Comments.Trailing)) != "" {
				t.P(s.Comments.Trailing)
			}
			t.P()
			serviceCode := fmt.Sprintf(`type %s struct{}`, s.Desc.Name())
			t.P(serviceCode)
			t.P()
			for _, m := range s.Methods {
				if strings.TrimSpace(string(m.Comments.Leading)) != "" {
					t.P(m.Comments.Leading)
				}
				if strings.TrimSpace(string(m.Comments.Trailing)) != "" {
					t.P(m.Comments.Trailing)
				}
				funcCode := fmt.Sprintf(`func(this *%s) %s(args *%s,reply *%s)error{
					
					return nil
				}
				`, s.Desc.Name(), m.Desc.Name(), m.Input.Desc.Name(), m.Output.Desc.Name())
				t.P(funcCode)
			}
		}
	}
	return nil
}
